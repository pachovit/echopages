stages:
  - test
  - build
  - deploy

test:
  image: python:3.9-slim
  stage: test
  before_script:
    - |
      apt-get update && apt-get install -y curl && \
      curl -sSL https://install.python-poetry.org | python3 - && \
      ln -s /root/.local/bin/poetry /usr/local/bin/poetry
    - poetry config virtualenvs.create false && poetry install
  script:
    - PYTHONPATH=. pytest --cov=echopages -s tests
  rules:
    - changes:
        - "**/*.py"
        - "pyproject.toml"
        - "tests/**"
        - "features/**"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - docker build -t pachovit/echopages:latest .
    - docker push pachovit/echopages:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - "**/*.py"
        - "pyproject.toml"
        - "tests/**"
        - "features/**"
        - "Dockerfile"

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: production
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --no-cache openssh-client )"
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml $DEPLOY_USER@$DEPLOY_SERVER:/echopages/docker-compose.yml
    - scp -o StrictHostKeyChecking=no production.env $DEPLOY_USER@$DEPLOY_SERVER:/echopages/production.env
    - ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER "
      echo 'POSTMARK_SERVER_API_TOKEN=${POSTMARK_SERVER_API_TOKEN}' >> /echopages/production.env;
      echo 'RECIPIENT_EMAIL=${RECIPIENT_EMAIL}' >> /echopages/production.env;
      docker pull pachovit/echopages:latest;
      docker compose -f /echopages/docker-compose.yml --env-file /echopages/production.env up -d;
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - "**/*.py"
        - "pyproject.toml"
        - "tests/**"
        - "features/**"
        - "Dockerfile"
        - "docker-compose.yml"
        - "production.env"
